AWSTemplateFormatVersion: '2010-09-09'
Description: Template to create an ECR repository, deploy an ECS Fargate service for the ToDo app, and all necessary infrastructure.

Resources:
  # ECR Repository
  ToDoAppECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: todo-app-repository  # Ensure it follows naming conventions

  # IAM Role for ECS Task Execution
  ToDoAppECSExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ToDoAppECSExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ToDoAppECSTaskExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:BatchCheckLayerAvailability
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'

  # Existing resources for VPC, Subnets, Internet Gateway, etc.
  ToDoVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: ToDoVPC

  ToDoPublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ToDoVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: ToDoPublicSubnet1

  ToDoPublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ToDoVPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: ToDoPublicSubnet2

  ToDoInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: ToDoInternetGateway

  ToDoAttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref ToDoVPC
      InternetGatewayId: !Ref ToDoInternetGateway

  ToDoPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref ToDoVPC
      Tags:
        - Key: Name
          Value: ToDoPublicRouteTable

  ToDoPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: ToDoAttachGateway
    Properties:
      RouteTableId: !Ref ToDoPublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref ToDoInternetGateway

  ToDoRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref ToDoPublicSubnet1
      RouteTableId: !Ref ToDoPublicRouteTable

  ToDoRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref ToDoPublicSubnet2
      RouteTableId: !Ref ToDoPublicRouteTable

  ToDoECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP traffic for ToDo app
      VpcId: !Ref ToDoVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: ToDoECSSecurityGroup

  ToDoECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: ToDoECSCluster

  ToDoECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: ToDoAppFargateTask
      Cpu: '256'
      Memory: '512'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt ToDoAppECSExecutionRole.Arn
      ContainerDefinitions:
        - Name: todo-container
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/todo-app-repository:latest"
          PortMappings:
            - ContainerPort: 3000
              Protocol: tcp
          Essential: true
          Environment:
            - Name: NODE_ENV
              Value: production

  ToDoECSService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ToDoECSCluster
      TaskDefinition: !Ref ToDoECSTaskDefinition
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !Ref ToDoPublicSubnet1
            - !Ref ToDoPublicSubnet2
          SecurityGroups:
            - !Ref ToDoECSSecurityGroup
          AssignPublicIp: ENABLED
      DesiredCount: 1

Outputs:
  ECRRepositoryURI:
    Description: URI of the ToDo ECR Repository
    Value: !GetAtt ToDoAppECRRepository.RepositoryUri

  ClusterName:
    Description: Name of the ECS Cluster
    Value: !Ref ToDoECSCluster

  TaskDefinition:
    Description: Task Definition ARN
    Value: !Ref ToDoECSTaskDefinition

  ECSServiceName:
    Description: Name of the ECS Service
    Value: !Ref ToDoECSService
